help(bwplot)
library(lattice)
help(bwplot)
help(str)
mpg
mpg()
library(ggplot)
library(ggplot2)
mpg
qplot(disp, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
x <- mpg$displ
y <- mpg$hwy
plot(x,y)
attributes(mpg$drv)
mpg$drv
levels(mpg$drv)
labels(mpg$drv)
help(qplot)
str(qplot)
qplot(displ, hwy, data = mpg, geom = c("sommth"))
qplot(displ, hwy, data = mpg)
library(ggplot2)
mpg
qplot(displ, hwy, data = mpt)
qplot(displ, hwy, data = mpg)
install.packages("RImpala")
library("RImpala")
library("rjava")
install.packages("rJava")
library("rjava")
library()
library("RImpala")
library("rJava")
library("rJava")
install.package("rJava")
install.packages("rJava")
library("rjava")
library("rJava")
install.packages("RImpala")
library("RImpala")
library(rJava)
library(RImpala)
library(rJava)
pnome(0)
help(pname)
help(pnome)
??pnome
library(lattice)
pnome(0)
installed.packages()
library(methods)
pnome(0)
library(ggplot)
library(ggplot2)
pnome(0)
library(math)
library(maths)
pnom(0)
pnorm(0)
pnorm(1)
pnorm(2)
pnorm(3)
help(dbinom)
help(dnorm)
sum(dbinom(70:245,size=245,p=0.25))
sum(dbinom(1:69,size=245,p=0.25))
dbinom(600,size=1000,p=0.56)
dbinom(600,size=1000,p=0.243)
dbinom(35,size=3000000,p=0.00001)
dbinom(1,size=2,p=0.5)
dbinom(34,size=3000000,p=0.00001)
dbinom(35,size=3000000,p=0.00001)
pnorm(0.5)
pnorm(0)
pnorm(110,mean=100,sd=10)-pnorm(90,mean=100,sd=10)
pnorm(50,mean=44.8,sd=5.679)
pnorm(49,mean=44.8,sd=5.679)
qnorm(0.9)
qnorm(0.5)
qnorm(0.95)
qnorm(0.975)
pnorm
pnorm(0.81)
qnorm(0.7910299)
qnorm(0.95)
dbinorm
help(dbinorm)
help(dbinom)
source("http://bit.ly/dasi_inference")
source("http://d396qusza40orc.cloudfront.net/statistics%2Flab_resources%2Finference.R")
pchisq(22.63,4,lower.tail=FALSE)
pchisq(31.68,2,lower.tail=FALSE)
pnorm(0.167)
pnorm(-0.167)
4 %in% 1:6
install.packages("Rwordseg")
install.packages("Rwordseg", repos = "http://R-Forge.R-project.org")
install.packages("rJava")
library("rJava")
install.packages("rJava")
install.packages("rjava")
help(percentile)
x <- 1:4;
p <- x/sum(x)
temp <- rbind(x,p)
rownames(temp) <- c("X","Prob")
temp
mean(temp)
stop "abc"
stop 'abc'
stop('abc')
help(stop)
install.packages("knitr")
library(knitr)
help(par)
help(xyplot)
library(lattice)
help(xyplot)
library(dataset)
library(data)
data(cars)
xyplot(cars)
names(cars)
xyplot(cars$speed,cars$dist)
xyplot(p,p)
library(datasets)
data(cars)
rm(list=ls())
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
data(ariquality)
data(airquality)
names(airquality)
xyplot(Ozone ~ Wind | factor(Month), data=airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data=airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data=airquality)
qplot(Wind, Ozone, data=airquality, facets=.~factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data=airquality, facets=.~factor(Month))
library(datasets)
data(airquality)
qplot(Wind, Ozone,data=airquality,facets = .~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data=airquality, facets = . ~ Month)
qplot(Wind, Ozone,data=airquality,facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes,rating))
print(g)
weeksday(Sys.time9)
weeksday(Sys.time())
weekday(Sys.time())
weekdays(Sys.time())
weekdays(Sys.time())
weekdays(Sys.time())
help(anova)
library(DAAG)
install.packages("DAAG")
library(DAAG)
data(allbacks)
class(allbacks)
View(allbacks)
book_mlr <- lm(weight ~ volume + cover, data=allbacks)
summary(book_mlr)
anova(book_mlr)
states <- read.csv("http://bit.ly/dasi_states")
dims(book_mlr)
dim(book_mlr)
install.packages("caret")
install.packages("caret")
library(caret)
help(train)
install.packages("ISLR")
library(ISLR)
date(Wage)
data(Wage)
class(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[,c("age","education","jobclass")], y=training$Wage,plot="pairs")
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage,plot="pairs")
qq <- qplot(age,wage,colour=education, data=training)
qq + geom_smooth(method='lm', formula=y~x)
cutWage <- cut2(training$wage, g=3)
install.packages("Hmisc")
library(Hmisc)
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
cutWage <- cut2(trainging$wage, g=3)
cutWage <- cut2(training$wage, g=3)
table(cutWage)
qplot(cutWage, age, data=training,fill=cutWage,geom=("boxplot"))
qplot(cutWage, age, data=training,fill=cutWage,geom=("boxplot","jitter"))
qplot(cutWage, age, data=training,fill=cutWage,geom=("boxplot","jitter"))
qplot(cutWage, age, data=training,fill=cutWage,geom=("jitter")
)
qplot(cutWage, age, data=training,fill=cutWage,geom=("boxplot","jitter"))
p2 <- qplot(cutWage, age, data=training,fill=cutWage,geom=("boxplot","jitter"))
p2 <- qplot(cutWage, age, data=training,fill=cutWage,geom=("jitter"))
p1 <- qplot(cutWage, age, data=training,fill=cutWage,geom=("boxplot"))
grid.arrange(p1,p2,ncol=2)
preObj <- preProcess(training[,-58], method=c("center","scale"))
help(predict)
help(train)
help(predict)
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
help(predict)
help(rbinom)
selectNA <- rbinom(dim(training)[1], size=1, prob=0.05)==1
selectNA
abc <- rbinom(dim(training)[1], size=1, prob=0.05)
abc
class(selectNA)
help(predict)
install.packages("shiny")
library(shiny)
install_github('slidifyLibraries', 'ramnathv')
library(devtools);install_github('slidifyLibraries', 'ramnathv')
library(slidify)
devtools::install_github("rstudio/rmarkdown")
install.packages("knit")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(knitr)
install.packages("markdown")
install.packages("markdown")
install.packages("markdown")
library(markdown)
library(knit)
library(knitr)
library(knitr)
install.packages("rmarkdown")
library(rmarkdown)
library(devtools)
library(devtools)
library(slidify)
## Agenda
This app is for normal distribution
1. Input description
2. Output description
3. Overall
--- .class #id
## Input
<img src="assets/img/input.jpg" />
The first input is for the population mu which range from -100 to 100 with step=1
The second input is for the standard deviation which range from 0.1 to 20 with step=1
The third slider is for the p value which range from -2 to 2
--- .class #id
## output
For mu=50, sd=10, p=0.5, we can get the P(x < 55) = 0.691
```{r echo=FALSE }
input <- data.frame(mean=50, sd=10, p=0.5)
mean=input$mean
sd=input$sd
lb=input$mean-5*input$sd
ub=input$mean+input$p*input$sd
x <- seq(-5,5,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
plot(x, hx, type="n", xlab="IQ Values", ylab="", main="Normal Distribution", axes=FALSE)
i <- x >= lb & x <= ub
lines(x, hx)
polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")
area <- pnorm(ub, mean, sd) - pnorm(lb, mean, sd)
result <- paste("P(IQ <=",ub,") =",
signif(area, digits=3))
mtext(result,3)
axis(1, at=seq(mean-5*sd, mean+5*sd, sd), pos=0)
lines (c(mean,  mean),  c(0, mean ), col="black" ,lwd =2)
```
--- &interactive
## Overall
You can view the <a href="https://testcourse.shinyapps.io/homework/">application</a><br/>
<a href="https://testcourse.shinyapps.io/homework/">https://testcourse.shinyapps.io/homework/</a>
author("mydeck")
setwd("C:/Users/jguo2/Jason/Coursera/devdataprod-005/homework")
author("mydeck")
install.packages("libcurl")
